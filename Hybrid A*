import random
import time
import heapq
from geopy.distance import geodesic

# Simulated Drone Parameters
SIM_START_GPS = (16.5062, 80.6480, 10)  # Starting GPS coordinates (latitude, longitude, altitude)
SIM_TARGET_GPS = (16.5075, 80.6500, 10) # Target GPS coordinates
SIM_DRONE_GPS = list(SIM_START_GPS)  # Mutable list to track drone's current GPS position
SIM_VELOCITY = 1.0  # Simulated drone velocity (GPS units per second)
SIM_OBSTACLE_RADIUS = 0.0002  # Radius for obstacle detection (GPS units)

# Simulated Obstacles
SIM_CAMERA_OBSTACLES = []  # List to store simulated camera obstacles
SIM_LIDAR_OBSTACLE_DISTANCE = 3.0  # Distance threshold for LiDAR obstacle detection

def simulate_move_to_location(target_lat, target_lon, target_alt=10, velocity=SIM_VELOCITY):
    """Simulates drone movement towards a target location."""
    target = (target_lat, target_lon, target_alt)  # Target GPS coordinates
    current = tuple(SIM_DRONE_GPS) # Current GPS coordinates
    distance = geodesic(current[:2], target[:2]).meters # calculate distance in meters
    time_to_move = distance / (velocity * 100000) # Rough conversion of meters to GPS units and calculate time
    steps = 10  # Number of steps for smooth movement
    dlat = (target_lat - current[0]) / steps # calculate change in latitude
    dlon = (target_lon - current[1]) / steps # calculate change in longitude
    dalt = (target_alt - current[2]) / steps # calculate change in altitude
    for i in range(steps):
        SIM_DRONE_GPS[0] += dlat # update latitude
        SIM_DRONE_GPS[1] += dlon # update longitude
        SIM_DRONE_GPS[2] += dalt # update altitude
        time.sleep(time_to_move / steps) # pause for a fraction of the total movement time
    print(f"Simulated move to: {SIM_DRONE_GPS}") # print current location

def simulate_detect_obstacle():
    """Simulates obstacle detection using a camera."""
    for obstacle in SIM_CAMERA_OBSTACLES:
        if geodesic(SIM_DRONE_GPS[:2], obstacle[:2]).meters < SIM_OBSTACLE_RADIUS * 100000: # check if drone is within obstacle radius
            print("Simulated Obstacle Detected by Camera!")
            return True # obstacle detected
    return False # no obstacle detected

def simulate_get_lidar_data():
    """Simulates LiDAR data acquisition."""
    if geodesic(SIM_DRONE_GPS[:2], SIM_TARGET_GPS[:2]).meters < SIM_LIDAR_OBSTACLE_DISTANCE * 100000: # check if drone is within lidar range to target
        print("Simulated Obstacle detected by lidar")
        return SIM_LIDAR_OBSTACLE_DISTANCE / 2 # return half of lidar range, to simulate obstacle
    return random.uniform(5, 10) # return a random value to simulate no obstacle.

def simulate_hybrid_a_star(start, goal, obstacles=None):
    """Simulates a simplified Hybrid A* path planning algorithm."""
    if obstacles is None:
        obstacles = set() # initialize obstacle set
    open_list = [(0, start)] # initialize open list with starting node
    came_from = {} # dictionary to store parent nodes
    g_score = {start: 0} # dictionary to store cost from start node
    f_score = {start: geodesic(start[:2], goal[:2]).meters} # dictionary to store total estimated cost

    while open_list:
        _, current = heapq.heappop(open_list) # get node with lowest f_score from open list
        if current == goal:
            path = [] # create path list
            while current in came_from:
                path.append(current) # append current node to path
                current = came_from[current] # move to parent node
            return path[::-1] # return reversed path

        for dlat, dlon, dalt in [(0.0001, 0, 0), (-0.0001, 0, 0), (0, 0.0001, 0), (0, -0.0001, 0), (0, 0, 1), (0, 0, -1)]: # define possible neighbor movements
            neighbor = (current[0] + dlat, current[1] + dlon, max(5, min(50, current[2] + dalt))) # calculate neighbor coordinates

            if neighbor in obstacles:
                continue # skip if neighbor is an obstacle

            temp_g_score = g_score[current] + geodesic(current[:2], neighbor[:2]).meters # calculate cost to neighbor
            if temp_g_score < g_score.get(neighbor, float('inf')):
                came_from[neighbor] = current # update parent node
                g_score[neighbor] = temp_g_score # update cost to neighbor
                f_score[neighbor] = temp_g_score + geodesic(neighbor[:2], goal[:2]).meters # update total estimated cost
                heapq.heappush(open_list, (f_score[neighbor], neighbor)) # add neighbor to open list
    return [] # return empty list if no path is found

def simulate_autonomous_navigation():
    """Simulates the drone's autonomous navigation."""
    obstacles = set() # initialize obstacle set
    while True:
        obstacle_detected = simulate_detect_obstacle() # check for camera obstacles
        lidar_data = simulate_get_lidar_data() # get lidar data

        if obstacle_detected or lidar_data < 3.0: # check for obstacle or lidar warning
            print("Recalculating Path...")
            obstacles.add(tuple(SIM_DRONE_GPS)) # add current position to obstacle set
            new_path = simulate_hybrid_a_star(tuple(SIM_DRONE_GPS), SIM_TARGET_GPS, obstacles) # calculate new path

            if new_path:
                for waypoint in new_path:
                    simulate_move_to_location(waypoint[0], waypoint[1], waypoint[2]) # move to each waypoint
                print("Path Followed.")
            else:
                print("No clear path! Hovering.")
        else:
            simulate_move_to_location(SIM_TARGET_GPS[0], SIM_TARGET_GPS[1], SIM_TARGET_GPS[2]) # move towards target
            if geodesic(SIM_DRONE_GPS[:2], SIM_TARGET_GPS[:2]).meters < 10: # check if target is reached
                print("Target Reached!")
                break

# Example Usage:
SIM_CAMERA_OBSTACLES = [(16.5068, 80.6490, 10)] #add a camera obstacle.
simulate_autonomous_navigation()
